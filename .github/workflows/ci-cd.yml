name: Urbanclear CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily security scans

# Add global permissions for the workflow
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  issues: write
  checks: write

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  # Code Quality and Security
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements-ci.txt'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
    
    - name: Code formatting check
      run: black --check --diff src/ tests/
    
    - name: Linting
      run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Type checking
      run: mypy src/ --config-file=config/mypy.ini
      continue-on-error: false  # Now that we fixed the issues
    
    - name: Security scanning
      run: |
        bandit -r src/ -c config/bandit.yaml -f json -o bandit-report.json
        safety check --json --output safety-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'requirements-ci.txt'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true
      continue-on-error: true
    
    - name: Upload coverage reports as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_traffic_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: test_user
          MONGO_INITDB_ROOT_PASSWORD: test_password
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements-ci.txt'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
    
    - name: Wait for services
      run: |
        sleep 30
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_traffic_db
        REDIS_URL: redis://localhost:6379/0
        MONGODB_URL: mongodb://test_user:test_password@localhost:27017/test_traffic_logs
      run: |
        pytest tests/integration/ -v --maxfail=3

  # API Tests
  api-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements-ci.txt'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
    
    - name: Start API server
      run: |
        uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Run API tests
      run: |
        pytest tests/api/ -v
    
    - name: API Health Check
      run: |
        curl -f http://localhost:8000/health || exit 1

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      # Required for uploading SARIF results
      security-events: write
      # Required for checking out the repository
      contents: read
      # Required for GitHub Actions
      actions: read
      # Required for pull requests
      pull-requests: read
      # Required for repository access
      repository-projects: read
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner (filesystem)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'  # Don't fail the job on vulnerabilities
    
    - name: Check if SARIF file exists
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "SARIF file created successfully"
          ls -la trivy-results.sarif
        else
          echo "SARIF file not found, creating empty one"
          echo '{"version": "2.1.0", "runs": []}' > trivy-results.sarif
        fi
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name != 'pull_request'
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-fs-scan'
      continue-on-error: true
    
    - name: Upload Trivy scan results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-filesystem-results
        path: 'trivy-results.sarif'

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t urbanclear:${{ github.sha }} .
        docker build -t urbanclear:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm urbanclear:${{ github.sha }} python -c "import src.api.main; print('Import successful')"
    
    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'urbanclear:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-container-results.sarif'
        exit-code: '0'  # Don't fail the job on vulnerabilities
      continue-on-error: true
    
    - name: Check if container SARIF file exists
      run: |
        if [ -f "trivy-container-results.sarif" ]; then
          echo "Container SARIF file created successfully"
          ls -la trivy-container-results.sarif
        else
          echo "Container SARIF file not found, creating empty one"
          echo '{"version": "2.1.0", "runs": []}' > trivy-container-results.sarif
        fi
    
    - name: Upload container scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name != 'pull_request'
      with:
        sarif_file: 'trivy-container-results.sarif'
        category: 'trivy-container-scan'
      continue-on-error: true
    
    - name: Upload container scan results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-container-results
        path: 'trivy-container-results.sarif'

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements-ci.txt'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
        pip install locust
    
    - name: Start API server
      run: |
        uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Run performance tests
      run: |
        locust -f tests/performance/locustfile.py --headless \
          --users 50 --spawn-rate 10 --run-time 60s \
          --host http://localhost:8000 \
          --html performance-report.html
    
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.html

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-tests, api-tests, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.urbanclear.example.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.REGISTRY_URL }}/urbanclear:staging-${{ github.sha }} .
        docker push ${{ secrets.REGISTRY_URL }}/urbanclear:staging-${{ github.sha }}
    
    - name: Deploy to staging
      run: |
        # Deploy to staging environment
        echo "Deploying to staging..."
        # Add your deployment script here

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [integration-tests, api-tests, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://urbanclear.example.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.REGISTRY_URL }}/urbanclear:prod-${{ github.sha }} .
        docker build -t ${{ secrets.REGISTRY_URL }}/urbanclear:latest .
        docker push ${{ secrets.REGISTRY_URL }}/urbanclear:prod-${{ github.sha }}
        docker push ${{ secrets.REGISTRY_URL }}/urbanclear:latest
    
    - name: Deploy to production
      run: |
        # Deploy to production environment with blue-green deployment
        echo "Deploying to production..."
        # Add your deployment script here
    
    - name: Post-deployment health check
      run: |
        # Wait for deployment to complete
        sleep 60
        # Health check
        curl -f https://urbanclear.example.com/health || exit 1
    
    - name: Notify deployment success
      if: success()
      run: |
        # Send notification (Slack, email, etc.)
        echo "Production deployment successful!"

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
    - name: Cleanup old Docker images
      run: |
        # Cleanup old images from registry
        echo "Cleaning up old Docker images..."
    
    - name: Archive logs
      run: |
        # Archive deployment logs
        echo "Archiving deployment logs..." 